/**
 * @author jjs@lltjs.com
 * @url www.lltjs.com
 */
 define(['jquery', 'https://cdn.staticfile.org/vue/2.6.9/vue.min.js'], function ($, Vue) {
    const item_list_tpl = `
<div style="padding: 1em;">
    <div class="item-list-selected aligen-center"  v-if="o.selected.length > 0">
        <slot name="selected" v-for="(item,index) in o.selected" :item="item" :index="index + 1"></slot>
        <div class="selected-loading" title="加载中..." v-if="o.init_ids.length > 0">
            <i class="fa fa-spinner fa-pulse"></i>
        </div>
    </div>
    <div v-else>
        <slot name="empty-selected"></slot>
    </div>
    <div class="tools">
        <div class="input-group" style="width:20em;" v-show="search_box && show_list">
          <input type="text" class="form-control" style="border-radius: 6px 0 0 6px;"  placeholder="输入搜索内容..." v-model="o.filter.keywords">
          <span class="input-group-addon" style="cursor:pointer;" @click="toggleSearchBox()" title="关闭搜索框"><i class="fa fa-ban"></i></span>
        </div> 
        <div class="btn-toolbar" role="toolbar">
            <div class="btn-group" role="group" v-show="show_list || o.selected.length == 0">
                <button type="button" 
                :class="{'btn btn-default': true, 'btn-revert': o.filter.keywords}"
                :title="'搜索 ' + o.filter.keywords" 
                @click="toggleSearchBox()" 
                v-show="!search_box">
                    <i :class="['fa', o.loading?'fa-spinner fa-spin':'fa-search', o.filter.keywords? 'fa-flip-horizontal':'']"></i>
                </button>
                <button type="button" class="btn btn-default"  title="全部选择" @click="addAll()" :disabled="no_selected">
                    <i :class="['fa', o.loading ? 'fa-spinner fa-spin':'fa-chevron-up', no_selected?'disabled':'']"></i>
                </button>
                <button type="button" class="btn btn-default"  title="全部取消" @click="removeAll()" :disabled="o.selected.length == 0">
                    <i :class="['fa', o.loading ? 'fa-spinner fa-spin' : 'fa-chevron-down', o.selected.length == 0 ? 'disabled':'']"></i>
                </button>
                <template  v-if="o.totalpage > 1">
                    <button type="button" class="btn btn-default" title="上一页" @click="prePage()" :disabled="o.page <= 1">
                        <i :class="['fa', o.loading?'fa-spinner fa-spin':'fa-angle-double-left', o.page > 1 ? '':'disabled']"></i>
                    </button>  
                    <button type="button" class="btn btn-default" disabled><span v-text="o.page"></span>/<span v-text="o.totalpage"></span></button>
                    <button type="button" class="btn btn-default" title="下一页" @click="nextPage()" :disabled="o.page >= o.totalpage">
                        <i :class="['fa', o.loading?'fa-spinner fa-spin':'fa-angle-double-right', o.page < o.totalpage ? '':'disabled']"></i>
                    </button>
                </template>
            </div>
            <div class="btn-group" role="group" v-show="o.selected.length > 0">
                <button type="button" class="btn btn-default" :title="show_list?'隐藏可选列表':'显示可选列表'" @click="toggleList()">
                    <i :class="['fa', show_list ? 'fa-eye-slash': 'fa-eye']"></i>
                </button>
            </div>
        </div>
    </div>
    <div  v-show="show_list || o.selected.length == 0">
        <div :class="['item-list', o.list.length > 20 ? 'space-between' : 'aligen-center']">
            <slot name="list" v-for="item in o.list" :item="item"></slot>
        </div>
        <div class="btn-more" v-if="more_objs">
            <i class="fa fa-angle-double-down" title="显示更多..." @click="changePageSize()" v-if="!o.loading"></i>
        </div>    
    </div>
    <div v-show="o.list.length === 0">
        <slot name="empty-list"></slot>
    </div>
</div>
`;
    const assign_ctrl_tpl = `
<div id="app" v-cloak>
    <slot></slot>
    <div class="panel panel-default">
        <div class="panel-heading">
            <div class="btn-group btn-group-justified" role="group">
                <div class="btn-group" role="group" v-if="funcs.all.enabled">
                    <button type="button" :class="['btn', all_sel ? 'btn-success':'btn-default']" 
                    @click="all_sel=true">全部</button>
                </div>
                <div class="btn-group" role="group"  v-if="funcs.agents.enabled">
                    <button type="button" 
                    :class="['btn', agents_sel ? 'btn-success':'btn-default']" 
                    @click="agents_sel=!agents_sel">
                        <i class="fa fa-spinner fa-pulse" title="加载中..." v-if="selectedLoading('agents')"></i> 代理商&nbsp;
                    <span class="selected-count" v-show="agents_selected_count > 0 && agents_sel">{{agents_selected_count}}</span>
                </button>
                </div>
                <div class="btn-group" role="group"  v-if="funcs.groups.enabled">
                    <button type="button" 
                    :class="['btn', groups_sel ? 'btn-success':'btn-default']" 
                    @click="groups_sel=!groups_sel">
                        <i class="fa fa-spinner fa-pulse" title="加载中..." v-if="selectedLoading('groups')"></i> 分组&nbsp;
                    <span class="selected-count" v-show="groups_selected_count > 0 && groups_sel">{{groups_selected_count}}</span>
                    </button>
                </div>
                <div class="btn-group" role="group"  v-if="funcs.tags.enabled">
                    <button type="button" 
                    :class="['btn', tags_sel ? 'btn-success':'btn-default']" 
                    @click="tags_sel=!tags_sel">
                        <i class="fa fa-spinner fa-pulse" title="加载中..." v-if="selectedLoading('tags')"></i> 标签&nbsp;
                    <span class="selected-count" v-show="tags_selected_count > 0 && tags_sel">{{tags_selected_count}}</span>
                    </button>
                </div>
                <div class="btn-group" role="group"  v-if="funcs.devices.enabled">
                    <button type="button" 
                    :class="['btn', devices_sel ? 'btn-success':'btn-default']" 
                    @click="devices_sel=!devices_sel">
                    <i class="fa fa-spinner fa-pulse" title="加载中..." v-if="selectedLoading('devices')"></i> 设备&nbsp;
                    <span class="selected-count" v-show="devices_selected_count > 0 && devices_sel">{{devices_selected_count}}</span>
                    </button>
                </div>
            </div>
        </div>
        <div class="panel-body" v-if="all_sel">
            <div class="jumbotron">
                 <h1>分配设备<small v-text="desc"></small></h1>
                <p>要分配到全部设备请按确定按钮，要清除所有已选设备请按清空按钮。<br>请选择？</p>
                <p>
                    <button type="button" class="btn btn-primary btn-outline" @click="btnOk()">确定</button>
                    <button type="button" class="btn btn-danger" @click="btnCleanAll()">清空</button>
                    <a class="btn btn-default" :href="back_url" role="button">返回</a>
                </p>
            </div>
        </div>
        <div class="panel-body bordered"  v-show="agents_sel">
            <item-list :obj="container['agents']"  @add-all="addAll" @remove-all="removeAll">
                <div class="empty-list" slot="empty-selected">
                    <span>请选择代理商</span>
                </div>
                <div class="empty-list" slot="empty-list">
                    <span>没有找到任何代理商，只支持查找手机号码和微信昵称！</span>
                </div>                
                <div slot="selected" slot-scope="props" class="agent item simple"
                @click="removeItem(container['agents'], props.item)">
                    <img 
                    :src="props.item.avatar"
                    :title="agentNameOf(props.item)">
                </div>
                <div
                slot="list" 
                slot-scope="props" 
                :class="{'item agent': true, 'selected': props.item.selected}"
                :style="{backgroundColor: props.item.selected ? '' : props.item.agentData.level.clr}"
                :title="props.item.nickname"
                :key="props.item.id"
                @click="toggleItem(container['agents'], props.item)">
                    <img :src="props.item.avatar">
                    <div>
                        <span class="name" v-text="agentNameOf(props.item)"></span>
                        <span class="total_tips">({{props.item.total}}台)</span>
                    </div>
                </div>
            </item-list>
        </div>
        <div class="panel-body bordered"  v-show="groups_sel">
            <item-list :obj="container['groups']"  @add-all="addAll" @remove-all="removeAll">
                <div class="empty-list" slot="empty-selected">
                    <span>请选择分组</span>
                </div>
                <div class="empty-list" slot="empty-list">
                    <span>没有找到任何分组</span>
                </div>   
                <div slot="selected" slot-scope="props" class="item group simple"
                    :style="{backgroundColor:props.item.clr}"
                    :key="props.item.id"
                    @click="removeItem(container['groups'], props.item)">
                    <span v-text="props.item.title" class="name"></span>
                </div>
                <div  slot="list" slot-scope="props" 
                    :class="{'item group': true, 'selected': props.item.selected}" 
                    :style="{backgroundColor:props.item.selected?'':props.item.clr}"
                    :key="props.item.id"
                    @click="toggleItem(container['groups'], props.item)">
                    <span class="name" :title="props.item.tag">{{props.item.title}}({{props.item.total}}台)</span>
                </div>
            </item-list>
        </div>        
        <div class="panel-body bordered"  v-show="tags_sel">
            <item-list :obj="container['tags']"  @add-all="addAll" @remove-all="removeAll">
                <div class="empty-list" slot="empty-selected">
                    <span>请选择标签</span>
                </div>
                <div class="empty-list" slot="empty-list">
                    <span>没有找到任何标签</span>
                </div>   
                <div slot="selected" slot-scope="props" class="item tag simple" @click="removeItem(container['tags'], props.item)">
                    <span v-text="props.item.title" class="name"></span>
                </div>
                <div  slot="list" slot-scope="props"
                :key="props.item.id"
                :class="{'item tag': true, 'selected': props.item.selected}" 
                @click="toggleItem(container['tags'], props.item)">
                    <span class="name" :title="props.item.tag">{{props.item.title}}({{props.item.count}}台)</span>
                </div>
            </item-list>
        </div>
        <div class="panel-body bordered"  v-show="devices_sel">
            <item-list :obj="container['devices']"  @add-all="addAll" @remove-all="removeAll">
                <div class="empty-list" slot="empty-selected">
                    <span>请选择设备</span>
                </div>
                <div class="empty-list" slot="empty-list">
                    <span>没有找到任何设备</span>
                </div>   
                <div slot="selected" slot-scope="props" class="item device simple" @click="removeItem(container['devices'], props.item)">
                    <span v-text="props.item.name" class="name"></span>
                </div>
                <div slot="list" slot-scope="props" 
                :key="props.item.id"
                :class="{'item device': true, 'selected': props.item.selected}" 
                @click="toggleItem(container['devices'], props.item)">
                    <span v-text="props.item.name" class="name"></span>
                    <div class="detail" v-if="props.item.agent">  
                        <div class="agent">
                            <div class="profile">
                                <img :src="props.item.agent.headimgurl">
                                <span>{{props.item.agent.name}}</span>
                                <span v-if="props.item.mobile">{{props.item.agent.mobile}}</span>
                            </div>                                       
                    </div>
                </div>
            </item-list>
        </div>
        <div class="panel-body"  v-show="!all_sel">
            <div class="pull-right">
                <button type="button" class="btn btn-primary" @click="btnOk()">确定</button>
                <a class="btn btn-default" :href="back_url" role="button">返回</a>
            </div>
        </div>
    </div>
</div>
`;
    const model = {};
    model.init = function (cfg, cb) {
        Vue.component('item-list', {
            template: item_list_tpl,
            props: {
                obj: {
                    type: Object,
                    require: true,
                },
            },
            data() {
                return {
                    o: this.obj,
                    search_box: false,
                    show_list: true,
                };
            },
            watch: {
                ['o.filter.keywords']() {
                    this.getData(1);
                },
                ['o.selected'](val) {
                    if (val.length === 0) {
                        this.show_list = true;
                    }
                },
            },
            computed: {
                more_objs() {
                    return this.o.list.length < this.o.total;
                },
                no_selected() {
                    return -1 == this.o.list.findIndex(e => !e.selected);
                }
            },
            created() {
                this.getData(this.o.page, () => {
                    this.initData();
                });
            },
            methods: {
                generateSerial() {
                    this.serial = Math.random();
                },
                toggleSearchBox() {
                    this.search_box = !this.search_box;
                },
                toggleList() {
                    this.show_list = !this.show_list;
                },
                changePageSize() {
                    this.o.filter.pagesize *= 2;
                    this.getData(1);
                },
                addAll() {
                    this.$emit('add-all', this.o);
                },
                removeAll() {
                    this.$emit('remove-all', this.o);
                },
                prePage() {
                    if (this.o.page > 1) {
                        this.getData(this.o.page - 1);
                    }
                },
                nextPage() {
                    this.getData(this.o.page + 1);
                },
                replaceIfExists(list) {
                    return function (t) {
                        const index = list.findIndex(e => e.id == t.id);
                        if (index != -1) {
                            Vue.set(list, index, t);
                            return true;
                        }
                        return false;
                    };
                },
                getIdsData(ids) {
                    const self = this;
                    return $.post(self.o.api_url, { ids: ids, pagesize: ids.length }, function (res) {
                        if (res && res.status && res.data) {
                            (res.data.list || []).forEach(e => {
                                e.selected = true;
                                self.o.selected.push(e);
                            });
                        }
                    });
                },
                initData() {
                    const self = this;
                    if (self.o.init_ids) {
                        const waits = [];
                        let ids_chunk = [];

                        self.o.init_ids.forEach(id => {
                            const entry = self.o.list.find(e => e.id == id);
                            if (entry) {
                                entry.selected = true;
                                self.o.selected.push(entry);
                            } else {
                                ids_chunk.push(id);
                                if (ids_chunk.length >= 50) {
                                    waits.push(this.getIdsData(ids_chunk));
                                    ids_chunk = [];
                                }

                            }
                        })
                        if (ids_chunk.length > 0) {
                            waits.push(this.getIdsData(ids_chunk));
                            ids_chunk = [];
                        }
                        $.when(...waits).done(() => {
                            self.o.init_ids = [];
                        });
                    }
                },
                getData(page, fn) {
                    this.generateSerial();
                    const res = this.fetchData(this.o, page, this.replaceIfExists(this.o.selected));
                    if (typeof fn == 'function') {
                        $.when(res).done(fn);
                    }
                },
                fetchData(obj, page, fn) {
                    const self = this;
                    if (!self.search_box) {
                        obj.filter.keywords = '';
                    }
                    const filter = {
                        page: page,
                        pagesize: obj.filter.pagesize,
                        keywords: obj.filter.keywords,
                        serial: self.serial,
                    };
                    obj.loading = true;
                    return $.post(obj.api_url, filter, function (res) {
                        if (res && res.status && res.data) {
                            if (res.data.serial && res.data.serial != self.serial) {
                                return;
                            }
                            Vue.set(obj, 'page', res.data.page || 0);
                            Vue.set(obj, 'total', res.data.total || 0);
                            Vue.set(obj, 'totalpage', res.data.totalpage || 0);
                            Vue.set(obj, 'list', res.data.list || []);

                            if (typeof fn === 'function') {
                                obj.list.forEach(e => {
                                    Vue.set(e, 'selected', fn(e));
                                });
                            }
                        }
                        obj.loading = false;
                    });
                },
            }
        });

        Vue.component('assign-ctrl', {
            template: assign_ctrl_tpl,
            data() {
                return {
                    funcs: {
                        all: {
                            show: true,
                            enabled: true
                        },
                        agents: {
                            show: false,
                            enabled: false
                        },
                        groups: {
                            show: false,
                            enabled: false
                        },
                        tags: {
                            show: false,
                            enabled: false
                        },
                        devices: {
                            show: false,
                            enabled: false
                        },
                    },
                    multi: false,
                    desc: '',
                    container: {},
                    back_url: '',
                };
            },
            watch: {
                funcs: {
                    handler(val) {
                        if (!(val.agents.show || val.groups.show || val.tags.show || val.devices.show)) {
                            val.all.show = true;
                        }
                    },
                    deep: true,
                },
            },
            computed: {
                all_sel: {
                    get() {
                        return this.funcs.all.enabled && this.funcs.all.show;
                    },
                    set(val) {
                        if (this.funcs.all.enabled) {
                            if (val) {
                                ['agents_sel', 'groups_sel', 'tags_sel', 'devices_sel'].forEach(i => {
                                    Vue.set(this, i, false);
                                });
                            }
                            
                            this.funcs.all.show = val;
                        }
                    }
                },
                agents_sel: {
                    get() {
                        return this.funcs.agents.enabled && this.funcs.agents.show;
                    },
                    set(val) {
                        if (this.funcs.agents.enabled) {
                            if (val) {
                                this.all_sel = false;
                                
                                if (!this.multi) {
                                    this.groups_sel = false;
                                    this.tags_sel = false;
                                    this.devices_sel = false;
                                }
                            }

                            this.funcs.agents.show = val;
                        }
                    }
                },
                groups_sel: {
                    get() {
                        return this.funcs.groups.enabled && this.funcs.groups.show;
                    },
                    set(val) {
                        if (this.funcs.groups.enabled) {
                            if (val) {
                                this.all_sel = false;
                                
                                if (!this.multi) {
                                    this.agents_sel = false;
                                    this.tags_sel = false;
                                    this.devices_sel = false;
                                }
                            }
                            
                            this.funcs.groups.show = val;
                        }
                    }
                },
                tags_sel: {
                    get() {
                        return this.funcs.tags.enabled && this.funcs.tags.show;
                    },
                    set(val) {
                        if (this.funcs.tags.enabled) {
                            if (val) {
                                this.all_sel = false;

                                if (!this.multi) {
                                    this.agents_sel = false;
                                    this.groups_sel = false;
                                    this.devices_sel = false;
                                }
                            }
                            
                            this.funcs.tags.show = val;
                        }
                    }
                },
                devices_sel: {
                    get() {
                        return this.funcs.devices.enabled && this.funcs.devices.show;
                    },
                    set(val) {
                        if (this.funcs.devices.enabled) {
                            if (val) {
                                this.all_sel = false;
                                
                                if (!this.multi) {
                                    this.agents_sel = false;
                                    this.groups_sel = false;
                                    this.tags_sel = false;
                                }
                            }
                            this.funcs.devices.show = val;
                        }
                    }
                },
                more_agents() {
                    return this.container.agents.list.length < this.container.agents.total;
                },
                no_selected_agents() {
                    return -1 == this.container.agents.list.findIndex(e => !e.selected);
                },
                agents_selected_total() {
                    let total = 0;
                    this.container.agents.selected.forEach(e => {
                        total += e.total;
                    });
                    return total;
                },
                agents_selected_count() {
                    return this.container.agents.selected.length;
                },
                groups_selected_count() {
                    return this.container.groups.selected.length;
                },
                tags_selected_count() {
                    return this.container.tags.selected.length;
                },
                devices_selected_count() {
                    return this.container.devices.selected.length;
                },
            },
            created() {
                this.init(cfg);
            },
            methods: {
                selectedLoading(name) {
                    if (name && this.container[name]) {
                        return this.container[name].init_ids.length > 0;
                    }
                    return false;
                },
                assigned_desc(data) {
                    if ($.isEmptyObject(data) ||
                        (data.all !== undefined && !data.all) ||
                        data.all === '0' || data.all === 'false') {
                        this.desc = '（未分配到任何设备）';
                        return this.desc;
                    }
                    if (data && data.all) {
                        this.desc = '（已分配到全部设备）';
                        return this.desc;
                    }
                    this.desc = '（已分配到指定设备）';
                    return this.desc;
                },
                init(cfg) {

                    this.assigned_desc(cfg.data);
                    const init_data = cfg.data || {};

                    if (cfg.multi) {
                        this.multi =  true;
                    }

                    (cfg.funcs || ['agents', 'groups', 'tags', 'devices']).forEach(name => {
                        Vue.set(this.container, name, {
                            api_url: cfg[name],
                            loading: false,
                            total: 0,
                            page: 1,
                            totalpage: 0,
                            filter: {
                                page: 0,
                                pagesize: 50,
                                keywords: '',
                            },
                            init_ids: init_data[name] || [],
                            list: [],
                            selected: [],
                        });
                        this.funcs[name].enabled = true;
                        if (cfg.data[name] && Array.isArray(cfg.data[name]) && cfg.data[name].length > 0) {
                            this.funcs[name].show = true;
                            this.all_sel = false;
                        }
                    });

                    this.back_url = cfg.back_url;
                },
                agentNameOf(agent) {
                    if (agent.agentData && agent.agentData.name) {
                        return agent.agentData.name;
                    }
                    return agent.nickname || '未知';
                },
                addAll(obj) {
                    const self = this;
                    obj.list.forEach(e => {
                        if (!e.selected) {
                            self.toggleItem(obj, e);
                        }
                    });
                },
                removeAllUnselected() {
                    for (const name in this.container) {
                        if (this.funcs[name].show == false) {
                            this.removeAll(this.container[name]);
                        }
                    }
                },
                removeAll(obj) {
                    const self = this;
                    obj.selected.forEach(e => {
                        e.selected = false;
                    });
                    obj.selected = [];
                },
                removeItem(obj, item) {
                    const index = obj.selected.findIndex(e => {
                        return e.id == item.id;
                    });
                    if (index != -1) {
                        obj.selected[index]['selected'] = false;
                        obj.selected.splice(index, 1);
                    }
                },
                toggleItem(obj, item) {
                    if (item.selected) {
                        this.removeItem(obj, item);
                    } else {
                        Vue.set(item, 'selected', true);
                        const index = obj.selected.findIndex(e => {
                            return e.id == item.id;
                        });
                        if (index == -1) {
                            obj.selected.push(item);
                        }
                    }
                },
                btnOk() {
                    let data = {};
                    if (this.all_sel) {
                        data['all'] = 1;
                    } else {
                        ['agents', 'groups', 'tags', 'devices'].forEach(name => {
                            if (this.funcs[name].enabled && this.funcs[name].show) {
                                if (this.container[name].selected.length > 0 && data[name] == undefined) {
                                    data[name] = [];
                                }
                                this.container[name].selected.forEach(e => {
                                    data[name].push(e.id);
                                });
                            }
                        });
                    }
                    this.saveData(data);
                },
                btnCleanAll() {
                    this.saveData({
                        all: 0
                    });
                },
                saveData(data) {
                    this.removeAllUnselected();
                    if (typeof cb == 'function') {
                        if (cb(data)) {
                            this.assigned_desc(data);
                        }
                    }
                }
            }
        })
        new Vue({
            el: '#app',
            data: {}
        })
    };

    return model;
})