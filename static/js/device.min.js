const api = {
    url: config.deviceApiUrl,
    ordersUrl: config.orderApiUrl,
    upgradeUrl: config.upgradeApiUrl,
}

api.showResult = function (params, url, cb) {
    $.getJSON(url || api.url, params).done(function (res) {
        if (res) {
            if (typeof cb == 'function') {
                if (cb(res)) {
                    return;
                }
            }
            if (res.status) {
                if (res.data && res.data.content) {
                    const dlg = util.dialog(res.data.title || '', res.data.content);
                    dlg.modal('show');
                }
            }
            if (res.message && res.type) {
                util.message(res.message, '', res.type);
            }
            if (res.data && res.data.msg) {
                util.message(res.data.msg, '', res.status ? 'success' : 'error');
            }
        }
    })
}

require(['jquery', 'util', vuejsUrl, echartsUrl, "clipboard"], function ($, util, Vue, echarts, ClipboardJS) {
    const clipboard = new ClipboardJS('[data-url]', {
        text: function (trigger) {
            return $(trigger).attr('data-url');
        }
    })

    clipboard.on('success', function (e) {
        util.message('复制成功', '', 'success');
    })

    const app = new Vue({
        el: '#appx',
        data: {
            expendStatus: 0,
            showSelectInputCtrl: false,
            selectedInputCtrl: [],
            agent: {
                list: [],
                keyword: '',
            },
            group: {
                list: [],
                keyword: '',
            },
            deviceTypes: {
                list: [],
                keyword: '',
            },
            tags: {
                selectedIds: [],
                list: [],
                loading: false,
                totalpage: 0,
                page: 1,
                pagesize: 10,
            },
            device: {
                loading: false,
                page: 1,
                pagesize: 20,
                totalpage: 0,
                lastParams: undefined,
                list: undefined,
                filter: {
                    agent: 0,
                    keywords: '',
                    type: undefined,
                    online: undefined,
                    offline: undefined,
                    low: undefined,
                    error: undefined,
                    maintenance: undefined,
                    lac: undefined,
                    lost: undefined,
                    no_order: undefined,
                    unbind: undefined,
                }
            }
        },
        watch: {
            ['device.page'](page) {
                this.getDevicesList();
            },
            ['device.filter.online'](v) {
                if (v) {
                    this.device.filter.offline = 0;
                }
            },
            ['device.filter.offline'](v) {
                if (v) {
                    this.device.filter.online = 0;
                }
            },
            expendStatus(v) {
                if (v && this.$refs.defaultInput) {
                    this.$nextTick(function () {
                        this.$refs.defaultInput.focus();
                    })
                }
            }
        },
        computed: {
            isAllSelected() {
                return this.device.list && this.device.list.filter(e => this.selectedInputCtrl.indexOf(e.id) === -1).length == 0;
            },
            canDownload() {
                return this.selectedInputCtrl.length > 0;
            },
            pager() {
                const len = 10;
                const start = this.device.page > len / 2 ? this.device.page - len / 2 : 1;
                const self = this;
                let pager = [];

                pager.push({
                    "title": "首页",
                    "num": () => 1,
                }, {
                    "title": "«上一页",
                    "num": () => self.device.page > 1 ? self.device.page - 1 : 1,
                })

                for (i = 0; i < len && start + i <= self.device.totalpage; i++) {
                    pager.push({
                        "num": function (i) {
                            return () => i + start;
                        }(i),
                        "title": start + i,
                    })
                }

                pager.push({
                    "title": "下一页»",
                    "num": () => self.device.page < self.device.totalpage ? self.device.page + 1 : self.device.totalpage,
                }, {
                    "title": "尾页",
                    "num": () => self.device.totalpage,
                })
                return pager;
            }
        },
        mounted() {
            if (current.agent.id) {
                this.agent.list.push(current.agent);
                this.device.filter.agent = current.agent.id;
            }
            if (current.tags.length > 0) {
                current.tags.forEach(tag => {
                    this.tags.list.push(tag);
                    this.tags.selectedIds.push(tag.id);
                })
            }
            if (current.deviceTypes.length > 0) {
                current.deviceTypes.forEach(type => {
                    this.deviceTypes.list.push(type);
                    if (this.device.filter.type == undefined) {
                        this.device.filter.type = type.id;
                    }
                })
            }

            this.getTagsList(true);
            this.getDevicesList();

            if (Object.keys(this.getParams()).length > 0) {
                this.expendStatus = 1;
            }
        },
        methods: {
            incrPageSize() {
                this.device.pagesize += 20;
                this.getDevicesList();
            },
            tagClicked(tag) {
                if (!this.tags.selectedIds.find(id => id === tag.id)) {
                    this.tags.selectedIds.push(tag.id);                   
                }
                
                const e = this.tags.list.find(e => e.id === tag.id);
                if (!e) {
                    tag.selected = true;
                    this.tags.list.push(e);
                } else {
                    Vue.set(e, 'selected', true);
                }
                this.expendStatus = 1;
                this.getDevicesList(); 
            },
            selectAll() {
                const add = this.isAllSelected ? false : true;
                this.device.list.forEach(e => {
                    if (add) {
                        if (this.selectedInputCtrl.indexOf(e.id) === -1) {
                            this.selectedInputCtrl.push(e.id);
                        }
                    } else {
                        const index = this.selectedInputCtrl.indexOf(e.id);
                        if (index !== -1) {
                            this.selectedInputCtrl.splice(index, 1);
                        }
                    }
                })
            },
            downloadQRCode() {
                util.loading();
                $.post(config.deviceApiUrl, {op: 'qrcode_download', ids: this.selectedInputCtrl}).then(res => {
                    util.loaded();
                    if (res && res.status && res.data.url) {
                        window.location.href = res.data.url;
                    }
                });
            },
            refreshStatus(o) {
                Vue.set(o, 'loading', true);
                $.get(config.deviceApiUrl, { op: "online", id: o.id }).then(function (res) {
                    o.status.mcb = res.data.mcb ? res.data.mcb : false;
                    o.status.app = res.data.app !== undefined ? res.data.app : null;
                    o.loading = false;
                })
            },
            searchAgent() {
                const self = this;
                const params = {
                    op: "search",
                    keyword: self.agent.keyword,
                }
                util.loading();
                $.get(config.agentApiUrl, params, function (res) {
                    if (res) {
                        self.agent.list = res.data || [];
                    }
                }, 'json').complete(function () {
                    util.loaded();
                })
            },
            searchDeviceTypes() {
                const self = this;
                const params = {
                    op: "search",
                    keywords: self.deviceTypes.keyword,
                }
                util.loading();
                $.get(config.deviceTypesApiUrl, params, function (res) {
                    if (res && res.data) {
                        self.deviceTypes.list = res.data.list || [];
                    }
                }, 'json').complete(function () {
                    util.loaded();
                })
            },
            searchGroup() {
                const self = this;
                const params = {
                    op: "group_search",
                    keywords: self.group.keyword,
                }
                util.loading();
                $.get(config.deviceApiUrl, params, function (res) {
                    if (res) {
                        self.group.list = res.data || [];
                    }
                }, 'json').complete(function () {
                    util.loaded();
                })
            },
            selectTag(tag) {
                if (tag.selected) {
                    tag.selected = false;
                    const index = this.tags.selectedIds.findIndex(id => id === tag.id);
                    if (index !== -1) {
                        this.tags.selectedIds.splice(index, 1);
                    }
                } else {
                    Vue.set(tag, 'selected', true);
                    if (this.tags.selectedIds.findIndex(id => id === tag.id) === -1) {
                        this.tags.selectedIds.push(tag.id);
                    }
                }
            },
            tagsPrePage() {
                if (this.tags.page > 0 && !this.tags.loading) {
                    this.tags.page -= 1;
                    this.getTagsList();
                }
            },
            tagsNextPage() {
                if (this.tags.page < this.tags.totalpage && !this.tags.loading) {
                    this.tags.page += 1;
                    this.getTagsList();
                }
            },
            searchTags() {
                util.loading();

                this.tags.page = 1;
                this.tags.pagesize = 10;
                this.getTagsList(false, function () {
                    util.loaded();
                })
            },
            getTagsList(append, fn) {
                const self = this;
                this.tags.loading = true;

                $.get(config.tagsApiUrl, {
                    keywords: self.tags.keyword,
                    page: self.tags.page,
                    pagesize: self.tags.pagesize,
                }, function (res) {
                    if (res && res.data) {
                        if (append) {
                            (res.data.list || []).forEach(tag => {
                                if (!self.tags.list.find(v => v.id === tag.id)) {
                                    self.tags.list.push(tag);
                                }
                            })
                        } else {
                            self.tags.list = res.data.list || [];
                        }

                        self.tags.list.forEach(tag => {
                            if (self.tags.selectedIds.find(id => id === tag.id)) {
                                Vue.set(tag, 'selected', true);
                            }
                        })
                        self.tags.totalpage = res.data.totalpage || 0;
                    }
                }, 'json').complete(function () {
                    self.tags.loading = false;
                    if (typeof fn === 'function') {
                        fn();
                    }
                })
            },
            searchButtonClicked() {
                this.device.page = 1;
                this.getDevicesList();
            },
            searchCancelButtonClicked() {
                this.expendStatus = 0;

                this.device.filter.type = '';
                this.device.filter.group = '';
                this.device.filter.agent = '';
                this.device.filter.keywords = '';
                this.device.filter.online = undefined;
                this.device.filter.offline = undefined;
                this.device.filter.low = undefined;
                this.device.filter.error = undefined;
                this.device.filter.maintenance = undefined;
                this.device.filter.lac = undefined;
                this.device.filter.lost = undefined;
                this.device.filter.no_order = undefined;
                this.device.filter.unbind = undefined;

                this.tags.list.forEach(e => {
                    Vue.set(e, 'selected', false);
                });
                this.tags.selectedIds = [];

                if (Object.keys(this.device.lastParams).length > 0) {
                    this.device.page = 1;
                    this.getDevicesList();
                }
            },
            deviceGroupClicked(group, agent) {
                if (group) {
                    this.expendStatus = 1;
                    if (this.group.list.findIndex(g => g.id === group.id) === -1) {
                        group.agent = agent;
                        this.group.list.push(group);
                    }
                    if (this.device.filter.group !== group.id) {
                        this.device.filter.group = group.id;
                        this.searchButtonClicked();
                    }
                }
            },
            cleanTagsClicked() {
                this.tags.selectedIds = [];
                this.tags.list.forEach(tag => {
                    if (tag.selected) {
                        tag.selected = false;
                    }
                })
            },
            agentClicked(agent) {
                if (agent) {
                    this.expendStatus = 1;
                    if (this.agent.list.findIndex(i => i.id === agent.id) === -1) {
                        this.agent.list.push(agent);
                    }
                    if (this.device.filter.agent !== agent.id) {
                        this.device.filter.agent = agent.id;
                        this.searchButtonClicked();
                    }
                }
            },
            getPage(index) {
                this.device.page = index;
                this.getDevicesList();
            },
            getParams() {
                const params = {};
                if (this.device.filter.keywords) {
                    params.keywords = this.device.filter.keywords;
                }
                if (this.device.filter.agent == "-1") {
                    params.agent_id = 0;
                } else if (this.device.filter.agent) {
                    params.agent_id = parseInt(this.device.filter.agent);
                }
                if (this.device.filter.type) {
                    params.device_type = parseInt(this.device.filter.type);
                }
                if (this.device.filter.group) {
                    params.group_id = parseInt(this.device.filter.group);
                }
                if (this.tags.selectedIds.length > 0) {
                    params.tag_ids = this.tags.selectedIds;
                }
                if (this.device.filter.online) {
                    params.online = 1;
                }
                if (this.device.filter.offline) {
                    params.online = 0;
                }
                if (this.device.filter.error) {
                    params.error = 1;
                }
                if (this.device.filter.low) {
                    params.low = 1;
                }
                if (this.device.filter.maintenance) {
                    params.maintenance = 1;
                }
                if (this.device.filter.lac) {
                    params.lac = 1;
                }
                if (this.device.filter.lost) {
                    params.lost = 1;
                }
                if (this.device.filter.no_order) {
                    params.no_order = 1;
                }
                if (this.device.filter.unbind) {
                    params.unbind = 1;
                }
                return params;
            },
            createEChat(id, data) {
                const chart = echarts.init(document.getElementById("chart_" + id));
                const o = {
                    grid: {
                        top: 0,
                        left: 0,
                        bottom: 0,
                        right: 0,
                    },
                    xAxis: {
                        boundaryGap: false,
                        type: 'category',
                        show: false,
                    },
                    yAxis: {
                        type: 'value',
                        show: false,
                    },
                    tooltip: {
                        formatter: "{c}秒",
                    },
                    series: [{
                        data: data,
                        type: 'line',
                        color: '#ccc',
                        areaStyle: {
                            color: '#e0e0e0',
                        }
                    }]
                };
                chart.setOption(o);
            },
            updateDeviceData(data) {
                const self = this;
                const index = self.device.list.findIndex(device => device.id == data.id);
                if (index != -1) {                    
                    Vue.set(self.device.list, index, Object.assign({}, self.device.list[index], data));
                }
            },
            removeDevice(id) {
                const index = this.device.list.findIndex(device => device.id == id);
                if (index != -1) {
                    this.device.list.splice(index, 1);
                }
            },        
            getDevicesList() {
                const self = this;
                self.device.loading = true;
                self.device.lastParams = self.getParams();
                $.get(config.deviceApiUrl, Object.assign({}, self.device.lastParams, {
                    op: "list",
                    page: self.device.page,
                    pagesize: self.device.pagesize,
                }), function (res) {
                    if (res && res.status && res.data) {
                        self.device.totalpage = res.data.totalpage || 0;
                        self.device.list = res.data.list || [];
                        self.device.list.forEach(device => {
                            self.getOnlineStats(device);
                            self.getDeviceData(device);   
                        })
                    }
                }, 'json').complete(function () {
                    self.device.loading = false;
                })
            },
            getOnlineStats(device) {
                const self = this;
                if (device.online_stats === undefined) {
                    Vue.set(device, 'online_stats', 'loading');
                    $.post(config.deviceApiUrl, { op: "online_stats", ids: [device.id] }).then(function (res) {
                        if (res && res.status && res.data) {
                            res.data.forEach(data => {
                                Vue.set(device, 'online_stats', 'loaded');
                                self.updateDeviceData(data, 'online');
                            });
                        }
                    })                    
                }
            },
            getDeviceData(device) {
                const self = this;
                if (device.device_data == undefined) {
                    Vue.set(device, 'device_data', 'loading');
                    $.post(config.deviceApiUrl, { op: "device_data", ids: [device.id] }).then(function (res) {
                        if (res && res.status && res.data) {
                            res.data.forEach(data => {
                                Vue.set(device, 'device_data', 'loaded');
                                data.loaded = true;
                                self.updateDeviceData(data, 'data');
                                $.get(config.deviceApiUrl, {
                                    op: "device_stats",
                                    id: data.id
                                }).then(function (res) {
                                    if (res && res.data) {
                                        self.createEChat(data.id, res.data);
                                    }
                                })
                            });
                        }
                    })                    
                }
            }
        }
    })

    api.refresAll = function () {
        if (confirm('确定要通知所有设备刷新配置吗？')) {
            api.showResult({ op: 'refresh_all' });
        }
    }

    api.deviceTestAll = function (id) {
        api.showResult({ op: 'deviceTestAll', id: id });
    }

    api.deviceTest = function (id, lane) {
        api.showResult({ op: 'deviceTest', id: id, lane: lane });
    }

    api.deviceTestA = function (id) {
        api.deviceTest(id, 0);
    }

    api.deviceTestLaneN = function (id, num, self) {
        if (self) {
            const table = self.closest('table');
            table.removeClass('operate');
            table.find('.test_btn i').each(function () {
                const e = $(this);
                const td = e.closest('td.test_btn');
                td.data('btn', td.html());
                if (e.is(self)) {
                    td.html('<div class="loading"><i class="fa fa-spinner fa-pulse"></i></div>');
                } else {
                    td.html('');
                }
            })
            api.showResult({ op: 'deviceTestLaneN', id: id, lane: num }, null, function () {
                table.addClass('operate');
                table.find('td.test_btn').each(function () {
                    const e = $(this);
                    e.html(e.data('btn'));
                })
            })
        }
    }

    api.deviceEdit = function (id) {
        location.href = api.url + '&' + $.param({ op: 'edit', id: id });
    }

    api.showMaintainRec = function (id) {
        location.href = api.url + '&' + $.param({ op: 'maintain_record', device_id: id });
    }

    api.deviceRevertPrompt = function (id) {
        api.showResult({ op: 'preRevert', id: id });
    }

    api.deviceRevert = function (id) {
        const code = $.trim($('input#confirmcode').val());
        if (code) {
            $('#revert-form-field').attr('disabled', true);
            api.showResult({ op: 'revert', id: id, code: code });
        }
    }

    api.unlock = function (id) {
        if (!confirm('确定要清除锁定吗？')) {
            return;
        }
        const td = $('tr[data-fetchid=' + id + '] td:first');
        const index = td.find('i').data('index');
        api.showResult({ op: 'unlock', id: id }, null, function (res) {
            if (res && res.status) {
                td.html(index);
            }
        })
    }

    api.confirmLAC = function (id) {
        if (!confirm('要清除位置变动提醒吗？')) {
            return;
        }
        const td = $('tr[data-fetchid=' + id + '] td:first');
        const index = td.find('i').data('index');
        api.showResult({ op: 'confirmLAC', id: id }, null, function (res) {
            if (res && res.status) {
                td.html(index);
            }
        })
    }

    api.setNormal = function (id) {
        if (!confirm('确定要取消设备的维护状态吗？')) {
            return;
        }

        api.showResult({ op: 'setNormal', id: id }, null, function (res) {
            if (res && res.status) {
                $('tr[data-fetchid=' + id + '] .devicename [data-op="setNormal"]').remove();
            }
        })
    }

    api.orders = function (id) {
        api.showResult({ op: 'default', device_id: id }, api.ordersUrl);
    }

    api.deviceOpen = function (id) {
        api.showResult({ op: 'open_door', deviceid: id });
    }

    api.deviceReset = function (id, lane) {
        let title;
        if (lane === undefined) {
            title = '确定要重置商品数量吗？';
        } else if (lane === 'all') {
            title = '确定要重置这台设备所有货道的商品数量吗？';
        } else {
            title = '确定要重置 货道' + (lane + 1) + ' 的商品数量吗？';
        }
        if (confirm(title)) {
            api.showResult({ op: 'reset', id: id, lane: lane });
        }
    }

    api.deviceCleanAppId = function (id) {
        if (confirm('确定要清除已注册的AppId吗？')) {
            api.showResult({ op: 'unreg', id: id });
        }
    }

    api.deviceRemove = function (id) {
        if (confirm('确定要删除这个设备吗？')) {
            api.showResult({ op: 'remove', id: id }, null, function (res) {
                if (res.type === 'success') {
                    app.removeDevice(id);
                }
            })
        }
    }

    api.showVersions = function (id) {
        api.showResult({ op: 'default', id: id }, api.upgradeUrl);
    }

    api.upgrade = function (deviceid) {
        const ver = $('#version_list').val();
        if (ver) {
            api.showResult({ op: 'upgrade', id: deviceid, version: ver });
        }
    }

    api.showDayStats = function (deviceid) {
        api.showResult({ op: 'daystats', id: deviceid });
    }

    api.showMonthStats = function (deviceid, _, self) {
        const month = self.closest('tr').data('month');
        api.showResult({ op: 'monthstats', id: deviceid, month: month });
    }

    api.repairMonthStats = function (deviceid, _, self) {
        self.toggleClass('fa-wrench fa-spinner fa-pulse').removeAttr('data-op');
        self.closest('td').removeClass('operate');
        self.closest('table').addClass('busy');

        const month = self.closest('tr').data('month');
        api.showResult({ op: 'repairMonthStats', id: deviceid, month: month }, undefined, function () {
            self.toggleClass('fa-wrench fa-spinner fa-pulse').attr('data-op', 'repair');
            self.closest('td').addClass('operate');
            self.closest('table').removeClass('busy');
        });
    }

    api.showAllStats = function (deviceid) {
        api.showResult({ op: 'allstats', id: deviceid });
    }

    api.deviceConfig = function (deviceid) {
        api.showResult({ op: 'refresh', id: deviceid });
    }

    api.deviceDetail = function (deviceid) {
        window.location.href = config.deviceDetailUrl.replace("__id__", deviceid);
    }

})

$(function () {
    $('body').on('click', '#list .pagination li:not(.active) a', function (e) {
        e.preventDefault();

        const url = $(this).attr("href");
        api.showResult({}, url);
    })

    $('[data-url]').each(function () {
        util.clip(this, $(this).data('url'));
    })

    $('body').on('click', '.operate [data-op]', function (e) {
        const op = $(this).data('op');
        if (op && api[op]) {
            const id = $(this).closest('tr').data('fetchid');
            const params = $(this).data('params');
            api[op](id, params, $(this));
        }
        e.preventDefault();
    })

    $('#devicelist').on('mouseover', '.imei.loading', function () {
        const co = $(this).removeClass('loading').find('.zovye_qrcode');
        co.html('<img src="' + co.data('src') + '">');
    })
})